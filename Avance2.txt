import org.apache.spark.sql.types._
val myDataSchema = StructType(
    Array(
        StructField("id_persona", DecimalType(26, 0), true), 
        StructField("anio", IntegerType, true), 
        StructField("mes", IntegerType, true), 
        StructField("provincia", IntegerType, true), 
        StructField("canton", IntegerType, true), 
        StructField("area", StringType, true), 
        StructField("genero", StringType, true), 
        StructField("edad", IntegerType, true), 
        StructField("estado_civil", StringType, true), 
        StructField("nivel_de_instruccion", StringType, true), 
        StructField("etnia", StringType, true), 
        StructField("ingreso_laboral", IntegerType, true), 
        StructField("condicion_actividad", StringType, true), 
        StructField("sectorizacion", StringType, true), 
        StructField("grupo_ocupacion", StringType, true), 
        StructField("rama_actividad", StringType, true), 
        StructField("factor_expansion", DoubleType, true)
    ));

val data = spark
  .read
  .schema(myDataSchema)
  .option("header", "true")
  .option("delimiter", "\t")
  .csv("/FileStore/tables/Datos_ENEMDU_PEA_v2.csv");

// Descripcion de datos
data.select("edad").distinct().show

// 1. Cual es la cantidad de personas mayores y menores de edad
val menorEdad = data.where($"edad" < 18)
print(menorEdad.count)

val mayorEdad = data.where($"edad" >= 18)
print(mayorEdad.count)

// 2. Cual es el porcentaje de personas mayores de edad que tienen un desempleo oculto.
val menorE_desOcult = (menorEdad.where($"condicion_actividad" === "8 - Desempleo oculto").count / menorEdad.count.toDouble) * 100

// 3. Cuantas personas mayores de edad tienen un Subempleo por insuficiencia de tiempo de trabajo
mayorEdad.where($"condicion_actividad" === "2 - Subempleo por insuficiencia de tiempo de trabajo").count

// 4. Cual es el porcentaje de personas menores de edad que constan con un empleo no clasificado
val menorE_noClas = (menorEdad.where($"condicion_actividad" === "6 - Empleo no clasificado").count / menorEdad.count.toDouble) * 100

// 5. Cual es el porcentaje de personas entre los rangos de edad entre los 20 y 30 aÃ±os tienen un empleo adecuado 
val rangoJoven = (mayorEdad.where($"edad" >= 20 && $"edad" <= 30))

val rangoJov_EmpAdec = (rangoJoven.where($"condicion_actividad" === "1 - Empleo Adecuado/Pleno").count / rangoJoven.count.toDouble) * 100